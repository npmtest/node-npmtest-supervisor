{"/home/travis/build/npmtest/node-npmtest-supervisor/test.js":"/* istanbul instrument in package npmtest_supervisor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-supervisor/lib.npmtest_supervisor.js":"/* istanbul instrument in package npmtest_supervisor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_supervisor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_supervisor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-supervisor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-supervisor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_supervisor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_supervisor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_supervisor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_supervisor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_supervisor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_supervisor.__dirname + '/lib.npmtest_supervisor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-supervisor/node_modules/supervisor/lib/supervisor.js":"var fs = require(\"fs\");\nvar spawn = require(\"child_process\").spawn;\nvar path = require(\"path\");\nvar fileExtensionPattern;\nvar startChildProcess;\nvar noRestartOn = null;\nvar debug = true;\nvar verbose = false;\nvar restartVerbose = false;\nvar ignoredPaths = {};\nvar ignoreSymLinks = false;\nvar forceWatchFlag = false;\nvar instantKillFlag = false;\nvar timestampFlag = false;\nvar interactive = true;\nvar log = console.log;\nvar crash_queued = false;\nvar harmony_default_parameters = false;\nvar harmony_destructuring = false;\n\nexports.run = run;\n\nfunction run (args) {\n    var arg, next, watch, ignore, pidFilePath, program, extensions, executor, poll_interval, debugFlag, debugBrkFlag, debugBrkFlagArg, harmony, inspect;\n    while (arg = args.shift()) {\n        if (arg === \"--help\" || arg === \"-h\" || arg === \"-?\") {\n            return help();\n        } else if (arg === \"--quiet\" || arg === \"-q\") {\n            debug = false;\n            log = function(){};\n        } else if (arg === \"--harmony\") {\n            harmony = true;\n        } else if (arg === \"--inspect\") {\n            inspect = true;\n        } else if (arg === \"--harmony_default_parameters\") {\n            harmony_default_parameters = true;\n        } else if (arg === \"--harmony_destructuring\") {\n            harmony_destructuring = true;\n        } else if (arg === \"--verbose\" || arg === \"-V\") {\n            verbose = true;\n        } else if (arg === \"--restart-verbose\" || arg === \"-RV\") {\n            restartVerbose = true;\n        } else if (arg === \"--watch\" || arg === \"-w\") {\n            watch = args.shift();\n        } else if (arg == \"--non-interactive\" || arg === \"-t\") {\n            interactive = false;\n        } else if (arg === \"--ignore\" || arg === \"-i\") {\n            ignore = args.shift();\n        } else if (arg === \"--save-pid\" || arg === \"-pid\") {\n            pidFilePath = args.shift();\n        } else if (arg === \"--ignore-symlinks\") {\n            ignoreSymLinks = true;\n        } else if (arg === \"--poll-interval\" || arg === \"-p\") {\n            poll_interval = parseInt(args.shift());\n        } else if (arg === \"--extensions\" || arg === \"-e\") {\n            extensions = args.shift();\n        } else if (arg === \"--exec\" || arg === \"-x\") {\n            executor = args.shift();\n        } else if (arg === \"--no-restart-on\" || arg === \"-n\") {\n            noRestartOn = args.shift();\n        } else if (arg.indexOf(\"--debug\") > -1 && arg.indexOf('--debug-brk') === -1) {\n            debugFlag = arg;\n        } else if (arg.indexOf('--debug-brk')>=0) {\n            debugBrkFlag = true;\n            debugBrkFlagArg = arg;\n        } else if (arg === \"--force-watch\") {\n            forceWatchFlag = true;\n        } else if (arg === \"--instant-kill\" || arg === \"-k\") {\n            instantKillFlag = true;\n        } else if (arg === \"--timestamp\" || arg === \"-s\") {\n            timestampFlag = true;\n        } else if (arg === \"--\") {\n            program = args;\n            break;\n        } else if (arg[0] != \"-\" && !args.length) {\n            // Assume last arg is the program\n            program = [arg];\n        }\n    }\n    if (!program) {\n        return help();\n    }\n    if (!watch) {\n        watch = \".\";\n    }\n    if (!poll_interval) {\n        poll_interval = 1000;\n    }\n\n    var programExt = program.join(\" \").match(/.*\\.(\\S*)/);\n    programExt = programExt && programExt[1];\n\n    if (!extensions) {\n        // If no extensions passed try to guess from the program\n        extensions = \"node,js\";\n        if (programExt && extensions.indexOf(programExt) == -1) {\n            // Support coffee and litcoffee extensions\n            if(programExt === \"coffee\" || programExt === \"litcoffee\") {\n                extensions += \",coffee,litcoffee\";\n            } else {\n                extensions += \",\" + programExt;\n            }\n        }\n    }\n    fileExtensionPattern = new RegExp(\"^.*\\.(\" + extensions.replace(/,/g, \"|\") + \")$\");\n\n    if (!executor) {\n        executor = (programExt === \"coffee\" || programExt === \"litcoffee\") ? \"coffee\" : \"node\";\n    }\n\n    if (debugFlag) {\n        program.unshift(debugFlag);\n    }\n    if (debugBrkFlag) {\n        program.unshift(debugBrkFlagArg);\n    }\n    if (harmony) {\n        program.unshift(\"--harmony\");\n    }\n    if (inspect) {\n        program.unshift(\"--inspect\");\n    }\n    if (harmony_default_parameters) {\n        program.unshift(\"--harmony_default_parameters\");\n    }\n    if (harmony_destructuring) {\n        program.unshift(\"--harmony_destructuring\");\n    }\n    if (executor === \"coffee\" && (debugFlag || debugBrkFlag)) {\n        // coffee does not understand debug or debug-brk, make coffee pass options to node\n        program.unshift(\"--nodejs\")\n    }\n    if (pidFilePath) {\n        var pid = process.pid;\n        //\n        // verify if we have write access\n        //\n        canWrite(pidFilePath, function(err) {\n            if ( err ) {\n                log(\"Continuing...\");\n            } else {\n                fs.writeFileSync(pidFilePath, pid + '\\n');\n            }\n        });\n    }\n\n    var deletePidFile = function(){\n        fs.exists(pidFilePath, function (exists) {\n            if ( exists ) {\n                log(\"Removing pid file\");\n                fs.unlinkSync(pidFilePath);\n            } else {\n                log(\"No pid file to remove...\");\n            }\n            process.exit();\n        });\n    };\n\n    try {\n        // Pass kill signals through to child\n        [ \"SIGTERM\", \"SIGINT\", \"SIGHUP\", \"SIGQUIT\" ].forEach( function(signal) {\n            process.on(signal, function () {\n                var child = exports.child;\n                if (child) {\n                    log(\"Received \"+signal+\", killing child process...\");\n                    child.kill(signal);\n                }\n                if (pidFilePath){\n                    deletePidFile();\n                }\n                else {\n                    process.exit();\n                }\n            });\n        });\n    } catch(e) {\n        // Windows doesn't support signals yet, so they simply don't get this handling.\n        // https://github.com/joyent/node/issues/1553\n    }\n\n    process.on('exit', function () {\n        var child = exports.child;\n        if (child) {\n            log(\"Parent process exiting, terminating child...\");\n            child.kill(\"SIGTERM\");\n        }\n    });\n\n    log(\"\");\n    log(\"Running node-supervisor with\");\n    log(\"  program '\" + program.join(\" \") + \"'\");\n    log(\"  --watch '\" + watch + \"'\");\n    if (!interactive) {\n        log(\"  --non-interactive\");\n    }\n    if (ignore) {\n        log(\"  --ignore '\" + ignore + \"'\");\n    }\n    if (pidFilePath){\n        log(\"  --save-pid '\" + pidFilePath + \"'\");\n    }\n    log(\"  --extensions '\" + extensions + \"'\");\n    log(\"  --exec '\" + executor + \"'\");\n    log(\"\");\n\n    // store the call to startProgramm in startChildProcess\n    // in order to call it later\n    startChildProcess = function() { startProgram(program, executor); };\n\n    // if we have a program, then run it, and restart when it crashes.\n    // if we have a watch folder, then watch the folder for changes and restart the prog\n    startChildProcess();\n\n    // If interaction has not been disabled, start the CLI\n    if(interactive) {\n\n        //\n        // Read input from stdin\n        //\n        var stdin = process.stdin;\n\n        stdin.setEncoding( 'utf8' );\n        stdin.on('readable', function() {\n            var chunk = process.stdin.read();\n            //\n            // Restart process when user inputs rs\n            //\n            if (chunk !== null && chunk === \"rs\\n\" || chunk === \"rs\\r\\n\") {\n                //      process.stdout.write('data: ' + chunk);\n                crash();\n            }\n        });\n    }\n\n    if (ignore) {\n        var ignoreItems = ignore.split(',');\n        ignoreItems.forEach(function (ignoreItem) {\n            ignoreItem = path.resolve(ignoreItem);\n            ignoredPaths[ignoreItem] = true;\n            log(\"Ignoring directory '\" + ignoreItem + \"'.\");\n        });\n    }\n\n    var watchItems = watch.split(',');\n    watchItems.forEach(function (watchItem) {\n        watchItem = path.resolve(watchItem);\n\n        if ( ! ignoredPaths[watchItem] ) {\n            log(\"Watching directory '\" + watchItem + \"' for changes.\");\n            if(interactive) {\n                log(\"Press rs for restarting the process.\");\n            }\n            findAllWatchFiles(watchItem, function(f) {\n                watchGivenFile( f, poll_interval );\n            });\n        }\n    });\n}\n\n// function print (m, n) { console.log(m+(!n?\"\\n\":\"\")); return print; }\nfunction print (m) { console.log(m); return print; }\n\nfunction help () {\n    print\n    (\"\")\n    (\"Node Supervisor is used to restart programs when they crash.\")\n    (\"It can also be used to restart programs when a *.js file changes.\")\n    (\"\")\n    (\"Usage:\")\n    (\"  supervisor [options] <program>\")\n    (\"  supervisor [options] -- <program> [args ...]\")\n    (\"\")\n    (\"Required:\")\n    (\"  <program>\")\n    (\"    The program to run.\")\n    (\"\")\n    (\"Options:\")\n    (\"  -w|--watch <watchItems>\")\n    (\"    A comma-delimited list of folders or js files to watch for changes.\")\n    (\"    When a change to a js file occurs, reload the program\")\n    (\"    Default is '.'\")\n    (\"\")\n    (\"  -i|--ignore <ignoreItems>\")\n    (\"    A comma-delimited list of folders to ignore for changes.\")\n    (\"    No default\")\n    (\"\")\n    (\"  --ignore-symlinks\")\n    (\"    Enable symbolic links ignoring when looking for files to watch.\")\n    (\"\")\n    (\"  -p|--poll-interval <milliseconds>\")\n    (\"    How often to poll watched files for changes.\")\n    (\"    Defaults to Node default.\")\n    (\"\")\n    (\"  -e|--extensions <extensions>\")\n    (\"    Specific file extensions to watch in addition to defaults.\")\n    (\"    Used when --watch option includes folders\")\n    (\"    Default is 'node,js'\")\n    (\"\")\n    (\"  -x|--exec <executable>\")\n    (\"    The executable that runs the specified program.\")\n    (\"    Default is 'node'\")\n    (\"\")\n    (\"  --debug[=port]\")\n    (\"    Start node with --debug flag. \")\n    (\"\")\n    (\"  --debug-brk[=port]\")\n    (\"    Start node with --debug-brk[=port] flag.\")\n    (\"\")\n    (\"  --harmony\")\n    (\"    Start node with --harmony flag.\")\n    (\"  --inspect\")\n    (\"    Start node with --inspect flag.\")\n    (\"\")\n    (\"  --harmony_default_parameters\")\n    (\"    Start node with --harmony_default_parameters flag.\")\n    (\"\")\n    (\"  -n|--no-restart-on error|exit\")\n    (\"    Don't automatically restart the supervised program if it ends.\")\n    (\"    Supervisor will wait for a change in the source files.\")\n    (\"    If \\\"error\\\", an exit code of 0 will still restart.\")\n    (\"    If \\\"exit\\\", no restart regardless of exit code.\")\n    (\"    If \\\"success\\\", no restart only if exit code is 0.\")\n    (\"\")\n    (\"  -t|--non-interactive\")\n    (\"    Disable interactive capacity.\")\n    (\"    With this option, supervisor won't listen to stdin.\")\n    (\"\")\n    (\"  -k|--instant-kill\")\n    (\"    use SIGKILL (-9) to terminate child instead of the more gentle SIGTERM.\")\n    (\"\")\n    (\"  --force-watch\")\n    (\"    Use fs.watch instead of fs.watchFile.\")\n    (\"    This may be useful if you see a high cpu load on a windows machine.\")\n    (\"\")\n    (\"  -s|--timestamp\")\n    (\"    Log timestamp after each run.\")\n    (\"    Make it easy to tell when the task last ran.\")\n    (\"\")\n    (\"  -h|--help|-?\")\n    (\"    Display these usage instructions.\")\n    (\"\")\n    (\"  -q|--quiet\")\n    (\"    Suppress DEBUG messages\")\n    (\"\")\n    (\"  -V|--verbose\")\n    (\"    Show extra DEBUG messages\")\n    (\"\")\n    (\"Options available after start:\")\n    (\"rs - restart process.\")\n    (\"     Useful for restarting supervisor eaven if no file has changed.\")\n    (\"\")\n    (\"Examples:\")\n    (\"  supervisor myapp.js\")\n    (\"  supervisor myapp.coffee\")\n    (\"  supervisor -w scripts -e myext -x myrunner myapp\")\n    (\"  supervisor -- server.js -h host -p port\")\n    (\"\");\n}\n\nfunction startProgram (prog, exec) {\n    log(\"Starting child process with '\" + exec + \" \" + prog.join(\" \") + \"'\");\n    crash_queued = false;\n    var child = exports.child = spawn(exec, prog, {stdio: 'inherit'});\n    // Support for Windows \".cmd\" files\n    // On Windows 8.1, spawn can't launch apps without the .cmd extention\n    // If already retried, let the app crash ... :'(\n    if (process.platform === \"win32\" && exec.indexOf('.cmd') == -1) {\n        child.on('error', function (err) {\n            if (err.code === \"ENOENT\")\n                return startProgram(prog, exec + \".cmd\");\n        });\n    }\n    if (child.stdout) {\n        // node < 0.8 doesn't understand the 'inherit' option, so pass through manually\n        child.stdout.addListener(\"data\", function (chunk) { chunk && console.log(chunk); });\n        child.stderr.addListener(\"data\", function (chunk) { chunk && console.error(chunk); });\n    }\n    child.addListener(\"exit\", function (code) {\n        logTimestamp();\n\n        if (!crash_queued) {\n            log(\"Program \" + exec + \" \" + prog.join(\" \") + \" exited with code \" + code + \"\\n\");\n            exports.child = null;\n            if (noRestartOn == \"exit\" || noRestartOn == \"error\" && code !== 0 || noRestartOn == \"success\" && code === 0) return;\n        }\n        startProgram(prog, exec);\n    });\n}\n\nfunction logTimestamp() {\n  if (timestampFlag) {\n    // use console.log() directly rather than log() so that -q/--quiet\n    // does not override/silence it\n    console.log(Date().toString());\n  }\n}\n\nfunction crash () {\n\n    if (crash_queued)\n        return;\n\n    crash_queued = true;\n    var child = exports.child;\n    setTimeout(function() {\n        if (child) {\n            if (instantKillFlag) {\n                log(\"crashing child with SIGKILL\");\n                process.kill(child.pid, \"SIGKILL\");\n            } else {\n                log(\"crashing child\");\n                process.kill(child.pid, \"SIGTERM\");\n            }\n        } else {\n            log(\"restarting child\");\n            startChildProcess();\n        }\n    }, 50);\n}\n\nfunction crashWin (event, filename) {\n    var shouldCrash = true;\n    if( event === 'change' ) {\n        if (filename) {\n            filename = path.resolve(filename);\n            Object.keys(ignoredPaths).forEach(function (ignorePath) {\n                if ( filename.indexOf(ignorePath + '\\\\') === 0 || filename === ignorePath) {\n                    shouldCrash = false;\n                }\n            });\n        }\n        if (shouldCrash) {\n            if (verbose || restartVerbose) {\n                log(\"Changes detected\" + (filename ? \": \" + filename : \"\"));\n            }\n            crash();\n        }\n    }\n}\n/**\n * Determine if a file can be written\n */\nfunction canWrite(path, callback) {\n    fs.open(path, \"w\", function (err, fd) {\n        if (err) {\n            if (err.code === \"EISDIR\") {\n                log(\"Can't open \" + path + \". It's a directory.\");\n            }\n            if (err.code === \"EACCESS\") {\n                log(\"Can't open \" + path + \". No access.\");\n            } else {\n                log(\"Can't open \" + path + \".\");\n            }\n            return callback(err);\n        }\n        fs.close(fd, function (err) {\n            if (err) return callback(err);\n            callback(null, true);\n        });\n    });\n}\n\n\nvar nodeVersion = process.version.split(\".\");\n\nvar isWindowsWithoutWatchFile = process.platform === 'win32' && parseInt(nodeVersion[1]) <= 6;\n\nfunction watchGivenFile (watch, poll_interval) {\n    if (isWindowsWithoutWatchFile || forceWatchFlag) {\n        fs.watch(watch, { persistent: true, interval: poll_interval }, crashWin);\n    } else {\n        fs.watchFile(watch, { persistent: true, interval: poll_interval }, function(oldStat, newStat) {\n            // we only care about modification time, not access time.\n            if ( newStat.mtime.getTime() !== oldStat.mtime.getTime() ) {\n                if (verbose) {\n                    log(\"file changed: \" + watch);\n                }\n            }\n            crash();\n        });\n    }\n    if (verbose) {\n        log(\"watching file '\" + watch + \"'\");\n    }\n}\n\nvar findAllWatchFiles = function(dir, callback) {\n    dir = path.resolve(dir);\n    if (ignoredPaths[dir])\n        return;\n    fs[ignoreSymLinks ? 'lstat' : 'stat'](dir, function(err, stats) {\n        if (err) {\n            console.error('Error retrieving stats for file: ' + dir);\n        } else {\n            if (ignoreSymLinks && stats.isSymbolicLink()) {\n                log(\"Ignoring symbolic link '\" + dir + \"'.\");\n                return;\n            }\n\n            if (stats.isDirectory()) {\n                if (isWindowsWithoutWatchFile || forceWatchFlag) callback(dir);\n                fs.readdir(dir, function(err, fileNames) {\n                    if(err) {\n                        console.error('Error reading path: ' + dir);\n                    }\n                    else {\n                        fileNames.forEach(function (fileName) {\n                            findAllWatchFiles(path.join(dir, fileName), callback);\n                        });\n                    }\n                });\n            } else {\n                if ((!isWindowsWithoutWatchFile || !forceWatchFlag) && dir.match(fileExtensionPattern)) {\n                    callback(dir);\n                }\n            }\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-supervisor/node_modules/supervisor/lib/cli-wrapper.js":"#!/usr/bin/env node\nvar path = require(\"path\")\n  , fs = require(\"fs\")\n  , args = process.argv.slice(1)\n\nvar arg, base;\ndo arg = args.shift();\nwhile ( fs.realpathSync(arg) !== __filename\n  && !(base = path.basename(arg)).match(/^supervisor$|^supervisor.js$|^node-supervisor$/)\n)\n\nrequire(\"./supervisor\").run(args)\n"}